AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Rol de ejecución para la función Lambda con permisos de CloudWatch Logs"
      RoleName: MyLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:us-east-1:590183865524:log-group:/aws/lambda/cf-api-node-student-mateo:**
                
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Función Lambda para procesar solicitudes HTTP"
      FunctionName: cf-api-node-student-mateo
      Handler: index.handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log("Hello, world!");
              return {
                  statusCode: 200,
                  body: JSON.stringify("Hello, world!"),
              };
          };
          
  MyLambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt MyLambdaFunction.Arn
      
  MyLambdaFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunctionUrl
      FunctionName: !Ref MyLambdaFunction
      FunctionUrlAuthType: 'NONE'
      Principal: "*"
